  - name: Get SPI status
    shell: "raspi-config nonint get_spi"
    register: spi_status

  - name: Print SPI status
    debug:
      msg: "SPI status is: {{ spi_status.stdout }}"

  - name: Enable SPI
    shell: "raspi-config nonint do_spi 0"
    when: spi_status.stdout != '0'

  - name: Get I2C status
    shell: "raspi-config nonint get_i2c"
    register: I2C_status

  - name: Print I2C status
    debug:
      msg: "I2C status is: {{ I2C_status.stdout }}"

  - name: Enable I2C
    shell: "raspi-config nonint do_i2c 0"
    when: I2C_status.stdout != '0'

  - name: Reboot if required
    reboot:
      msg: "Reboot with ansible..."
      connect_timeout: 5
      reboot_timeout: 300
      pre_reboot_delay: 0
      post_reboot_delay: 30
      test_command: uptime
    when: spi_status.stdout != '0' or I2C_status.stdout != '0'
  
  - name: Install pip, git
    apt:
      name: 
        - python3-pip
        - git
        - libjpeg-dev
        - zlib1g-dev
        - libopenblas-dev
      state: present

  - name: Create the github directory if it does not exist
    file:
      path: /home/{{ ansible_user }}/Github
      state: directory
      mode: '0755'

  - name: Git clone the pi-frame
    git:
      repo: https://github.com/Dfearns7/pi-frame.git
      dest: /home/{{ ansible_user }}/Github/pi-frame

  - name: Git clone the demo 
    git:
      repo: https://github.com/pimoroni/inky.git
      dest: /home/{{ ansible_user }}/Github/inky

  - name: Go to the folder and execute command
    command: chdir=/home/{{ ansible_user }}/Github/inky ./install.sh -f
    become: true
    become_user: "{{ ansible_user }}"

  - name: Reboot if required
    reboot:
      msg: "Reboot with ansible..."
      connect_timeout: 5
      reboot_timeout: 300
      pre_reboot_delay: 0
      post_reboot_delay: 30
      test_command: uptime

  - name: Go to the piframe folder and make shell file executable
    command: chdir=/home/{{ ansible_user }}/Github/pi-frame/ chmod +x start-piframe.sh 

  - name: Check if /etc/rc.local exists
    stat:
      path: "/etc/rc.local"
    register: etc_rc_local_file

  - name: Create the file /etc/rc.local should it not already exist
    copy:
      dest: /etc/rc.local
      owner: root
      group: root
      mode: 0750
      content: |
        #!/bin/sh -e
        #
        # rc.local
        #
        # This script is executed at the end of each multiuser runlevel.
        # Make sure that the script will "exit 0" on success or any other
        # value on error.
        #
        # In order to enable or disable this script just change the execution
        # bits.
        #
        # By default this script does nothing.

        # Print the IP address
        _IP=$(hostname -I) || true
        if [ "$_IP" ]; then
          printf "My IP address is %s\n" "$_IP"
        fi

        sudo /home/{{ ansible_user }}/Github/pi-frame/start-piframe.sh &

        exit 0

  - name: Create the systemd service piframe
    register: piframe_service
    copy:
      dest: /etc/systemd/system/piframe.service
      owner: root
      group: root
      mode: 0644
      content: |
        [Unit]
        Description=piframe display photos
        After=syslog.target network.target auditd.service

        [Service]
        User=raspberrypi
        ExecStart=/home/{{ ansible_user }}/Github/pi-frame/start-piframe.sh

        [Install]
        WantedBy=multi-user.target

  - name: Reload systemd daemon
    systemd:
      daemon_reload: yes
    when: piframe_service.changed|bool

  - name: Enable piframe.service
    systemd:
      name: piframe
      enabled: true

  - name: Make sure piholedisplay is started and enabled
    systemd:
      name: "piframe"
      state: started
      enabled: true
    register: service_started

  - name: sudo start the service
    command: service piframe start 
    when: service_started.enabled == false